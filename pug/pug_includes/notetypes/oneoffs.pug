-
  var oneoffs = [
    {
      "title" : "parallel",
      "para" : "is an update running with both of old and new"
    },
    {
      "title" : "customer sign off",
      "para" : "can either be sprint review or at the end of the project"
    },
    {
      "title" : "epic",
      "para" :  "An Epic is a high-level body of work bring groups of related stories together."
    },
    {
      "title" : "scrum and v-model",
      "para" : "donâ€™t include is change of scope of a project." 
    },
    {
      "title" : "v-model",
      "para" : "v-model is a variation of waterfall whereby it focuses on ensuring that every stage has a parallel set of test to check that it meets its requirements. the customer is only involved at the start and very end of the process.| test-driven development includes the users at every stage making sure everything works as intended."
    },
    {
      "title" : "non-functional",
      "para" : "usability: having all functions available when wanting to test the app.|reliability: having all the details in place mainly looking at how it functions and if it works.|recoverability: being able to replace components with minimum work effort.|maintainability: having a way to keep a simple format that gives access to simple fixes.|serviceability: easy way to repair and maintain with little effort of a service|Performance:  making sure systems work on a set of criteria as standards.|scalability:  appropriately handling increasing and decreasing workloads.|capacity:  making sure that we can deliver enough functionality to the end users.|availability:  making sure everything functions and is on at all times.|security:  making sure that security can be maintained and can prevent what it requires to protect."
    },
    {
      "title" : "class diagram",
      "para" : "A class diagram holds the information like the following example: | class name| +age: Int| +gender: String| ____________| functions| + role() "
    },
    {
      "title" : "class diagram usecase",
      "para" : "to structure data showing the systems classes, attributes, methods and relationships among other objects"
    },

    {
      "title" : "class diagram notation",
      "para" : "class name: | name of the class | class attributes:| these show the attributes the class have| class operations:| these hold the functions and methods the class holds"
    },

    {
      "title" : "class diagram relationship types",
      "para" : "inheritence:| superclass holds the data, for the following example lets use human.| the class holds the following as attributes:| +brain: String| +bones: String| We then want to identify certain people with the superclass, these are called subclasses and take the attributes when they are connected to the superclass."
    },

    {
      "title" : "relationship between classes types",
      "para" : "there are 6 types:| Association| Inheritance| Realisation| Dependency| Aggregation| Composition| Each relation shows how the code should be implemented."
    },
    {
      "title" : "inheritance",
      "para" : "The ability of a child class to inherit the same functionality of another class making it the super class.| represented with a solid line with a white arrow"
    },

    {
      "title" : "association",
      "para" : "this represents a relationship between two classes.| single solid line beween classes"
    },

    {
      "title" : "cardinality",
      "para" : "they indicate the number of instances of a class linked to another instance from another class"
    },

    {
      "title" : "aggregation",
      "para" : "special type of association, where objects are put together to create a more complex object.| a solid line with a white diamond"
    },

    {
      "title" : "composition",
      "para" : "special type of aggregation, has a strong ownership between two classes when one class is part of another class.| represented by a solid line and a black diamond"
    },

    {
      "title" : "dependency",
      "para" : "is a relationship in which one element, depends on another element. represented by a dash line with an arrow."
    },
    {
      "title" : "realisation",
      "para" : "a relationship beween classes, interfaces, components and packages that connect the blueprint to the implementation."
    },

    {
      "title" : "class visibility",
      "para" : "there are 3 operators, the following are examples:| + is public| - is private| # is protected "
    },

    {
      "title" : "different types of testing",
      "para" : "there are 8 types of testing:| black box| white box| dynamic testing| static testing| intergrational testing| system testing| unit testing| acceptance testing"
    },

    {
      "title" : "black box",
      "para" : "this is done by testers and users| mainly used to to produce the right output when you add the input.| for example:| 2 + 2 should = 4, if it does then its correct.| this is seeing the front end, no code is being tested."
    },

    {
      "title" : "white box",
      "para" : "this is done by programmers.| the program is run through the correct functions when testing. this is all the backend checking the code."
    },

    {
      "title" : "dynamic testing",
      "para" : "this is tested by testers and programmers. | this is whenever the code is running, this can be looking at functional and non-functional elements"
    },

    {
      "title" : "stactic testing",
      "para" : "this is done by the programmers.| its to test the static code to see if it works as is"
    },

    {
      "title" : "integration testing",
      "para" : "this is tested by the programmers, testers and users.| this is the process of combining functions/methods together and testing them to see if they are compatible together."
    },

    {
      "title" : "system testing",
      "para" : "this is done by programmers, testers and users.| this is to test the whole system"
    },

    {
      "title" : "unit testing",
      "para" : "This is tested bby the programmers.| small parts of the code are tested.| like a simple line of code or single function at a time."
    },

    {
      "title" : "acceptance testing",
      "para" : "this is tested by the testers and users.| it allows the testers to check if they are happy with the final product."
    },

    {
      "title" : "user stories tldr",
      "para" : "user stories are a general explanation of how a software feature is written for the end user.| Its a way to understand how a software feature can provide value to the customer."
    },

    {
      "title" : "user stories main focus",
      "para" : "The main aspect is to put users at the forefront of everything.| this is done through a non-technical language that helps explain simply to the development team.| they are able to understand and know what they're to build."
    },

    {
      "title" : "agile program user stories",
      "para" : "this is one of the core components of an agile program.| it gives a user focused framework for daily work, which also drives collaboration, creativity and a better product overall."
    },

    {
      "title" : "user stories building blocks",
      "para" : "they are the building blocks of larger agile frameworks like epics and initiatives."
    },

    {
      "title" : "user story example",
      "para" : "'as a [persona], i [want to],[so that].'| as a [persona] translated to who are we making this for?| [wants to] is what they want to be able to achieve.| [so that] is the desire to do something that fits their vision.| one example is the following:| as max, i want to invite my friends, so we can enjoy this service together."
    },

    {
      "title" : "user story final",
      "para" : "to evaluate, this is expressed as persona + need + purpose."
    },

    {
      "title" : "product backlog",
      "para" : "this is a list of all the user stories/requirments that need to be completed.| This is populated by the product owner."
    },

    {
      "title" : "sprint backlog",
      "para" : "this is a list of items to be completed within the sprint selected from the product backlof by the developement team."
    },

    {
      "title" : "scrum roles",
      "para" : "there are a few roles to remember:| scrum master/agile coach| product owner| development team"
    },

    {
      "title" : "scrum master",
      "para" : "they protect the team by making sure they do not over-commit to what they can achieve suring a sprint."
    },

    {
      "title" : "product owner",
      "para" : "they're accountable for maximizing the value of the product, provided by the scrum team."
    },

    {
      "title" : "development team",
      "para" : "comprised of a professional team who deliver a potentially releasable increment of a done product at the end of every sprint."
    },

    {
      "title" : "software architecture tldr",
      "para" : "this refers to the structure of a software system alongside the discipline of creating systems.| each structure comprises elements, relations and properties of both elements and relations. "
    },

    {
      "title" : "waterfall model tldr",
      "para" : "is a sequential development process that flows like a waterfall through all phases of a project.| it relies on the previous task being completed before moving forward with the next task."
    },

    {
      "title" : "agile",
      "para" : "its a system that helps the team work collaboratively through doing the following:| look at requirements > plan > take action > review the progress made > then repeat until completed."
    },

    {
      "title" : "scrum vs kanban",
      "para" : "these are the 2 main frameworks for agile.| scrum focuses on taking chunks of tasks called sprints andget a daily feedback of the tasks.| Kanban focuses on having a weekly meeting with continuous flow which helps the team look at the most important task first which they reflect on with incremental improvements."
    },

    {
      "title" : "architect tldr",
      "para" : "person in charge of leading the practice and introducing the overall technical vision for a particular solution.| finding the best tech solution among all possible to solve the existing business problems.| describing the structure, characteristics, behaviour, and other aspects of software to project stakeholders."
    },

    {
      "title" : "system development life cycle (SDLC)",
      "para" : "is a series of six main phases to create a hardware system only, a software system only or a combination of both to meet or exceed customerâ€™s expectations.| the sequence is planning > analysis > design > implementation > testing > maintenance and repeat "
    },

    {
      "title" : "sprint tldr",
      "para" : "a timed amount to get through products and review them."
    },

    {
      "title" : "architecture",
      "para" : "is a description or model of a system that includes all details of the system: | structure| components| behaviour| attributes| context.| its not just about design it includes the whole system in mind being internal and external interactions."
    },

    {
      "title" : "architecture levels",
      "para" : "these are only a few of the levels that are to be known as a minimum requirement:| enterprise architecture| business architecture| solution architecture| infrastructure architecture| "
    },

    {
      "title" : "enterprise architecture (EA)",
      "para" : "this is the highest level architecture, looks at the long-term strategic issues comprised of all aspects such as human, political, social, software and hardware.| they plan and regulate all aspects of building, maintaining and improving all components of the system.| main focus being that they bring both business and IT aspects of the organisation together."
    },

    {
      "title" : "business architecture (BA)",
      "para" : "this is a business strategy with the aim of having goals and objectives that the organisation can utilise.| they use operational models in order to succeed and achieve this can be through potentially competitive business environment.| they help with understanding the reason for why the system is in place, how it works and why they're better than other businesses."
    },

    {
      "title" : "solution architecture",
      "para" : "its a practice to provide ground for projects tailored for IT solutions, focuses on business needs and defining their functional requirements through stages of implementations.| they cover all aspects of a business, and are strategic with a tactical perspective.| they plan, design and create the building blocks within the system, each block has a reason of being there."
    },

    {
      "title" : "infrastructure architecture",
      "para" : " is a combination of hardware, software and communication that provides the underlying foundation to support the organisation's goals.| they look in between the building blocks making sure the communications and foundations are built properly and connected."
    },

    {
      "title" : "the open froup architecture framework (TOGAF)",
      "para" : "this is one of the commonly used frameworks that is implemented through enterprise architecture management in an organisation."
    },

    {
      "title" : "software architecture",
      "para" : "is commonly one of the components that make up a solution architecture. they have many different architectures and designs.| they aim to develop a multi-tiered approach where the software code itself is split into different components, each with its own purpose and functionality."
    },

    {
      "title" : "infrastructure architecture extra",
      "para" : "they can be known as technology infrastructure, they are concerned with modelling the hardware elements within an organisation with the interactions and relationships between them."
    },

    {
      "title" : "computer aided software testing (CAST)",
      "para" : "a process that eliminates having us go through manually to check and test, it speeds the process and has less chances to fail."
    },

    {
      "title" : "computer aided requirements engineering (CASE)",
      "para" : "covers everything from requirements through to testing."
    },

    {
      "title" : "application lifecycle management (ALM)",
      "para" : "is an integrated system of people, processes and tools that manage the life an application from concept to end point.| while SDLC focuses on software development phase."
    },

    {
      "title" : "benefits of using tools during SDLC",
      "para" : "this is maintaining links and cross referencing, being able to visually model and have tracability and impacts analysis.| what benefits:| storage| availability| security| version control| change control."
    },

    {
      "title" : "standardisation",
      "para" : "notation and syntax is a critical element of the team based activity mainly developing and managing IT systems.| includes documenting and specific visual syntax for diagram notation"
    },

    {
      "title" : "storage",
      "para" : "this is to make sure that they can be stored and backed up electronically.| creating a repo is a simple way of having a folder on a disk drive that holds the data."
    },

    {
      "title" : "availability",
      "para" : "having access to the file or documents from a repo that can be shared between different people with access that involves over the internet as well."
    },

    {
      "title" : "security",
      "para" : "being able to make sure its secure with access control over through users that can maintain and make sure people can't gain access to higher control"
    },

    {
      "title" : "system modelling tools",
      "para" : "this can be often used by a number of roles, each evolving the models towards the solution:| business analysts| system analysts| designers| developers.| testers can also take these models to analyse and design the testing needed.| the tools all integrate with other testing tools."
    },

    {
      "title" : "software development tools",
      "para" : "this can provide help for the developers to tak a design to write source code or use visual notation that links components into an assembly where the code can be automatically generated.| there are various forms for this:| interpreter| compiler| run time environments."
    },

    {
      "title" : "interpreted code",
      "para" : "is a set of instructions at runtime which can be interpreted by a browser to run a page for example made by javascript."
    },

    {
      "title" : "compiled code",
      "para" : "this is a type of execution which happens a program compiles the instructions given. it produces a static result which works on run-time.| example would be pug and on compile it makes a html document."
    },

    {
      "title" : "testing tools",
      "para" : "there are several methods all designed to run a test on your product, we use these tools to speed up production for repetitive tasks.| mainly we have test management which allows you to plan, review and evaluate the testing.| test design, allows for testing scenarios of sample designs using sample data.| automated testing is automated.| test analysis, shows the results of the tests and helps identify what can be done to fix the issues."
    },

    {
      "title" : "release management",
      "para" : "they handover from development to operations, this to check the software and hardware all worked together, and finally make sure that everything works with the added of having training and documentation.| release could be through,| pilots| incremental release| big-bang delivery.| the tools may continually be updated to our clients ensuring they have the most up to date version they can."
    },

    {
      "title" : "service management tools",
      "para" : "this is basically after release we monitor and check if there needs to be any improvement or new solutions that the client requests for. which goes back through the SDLC."
    },

    {
      "title" : "evaluation tools",
      "para" : "this is assessed and given careful considerations to the tools that are adopted in the process.| mainly want to focus on having:| requirements done| make sure the functionality works| finally check the suitability of the tool ensuring it fits the clients needs."
    },



  ]
