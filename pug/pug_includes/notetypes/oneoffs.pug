-
  var oneoffs = [
    {
      "title" : "parallel",
      "para" : "is an update running with both of old and new"
    },
    {
      "title" : "customer sign off",
      "para" : "can either be sprint review or at the end of the project"
    },
    {
      "title" : "epic",
      "para" :  "An Epic is a high-level body of work bring groups of related stories together."
    },
    {
      "title" : "scrum and v-model",
      "para" : "don’t include is change of scope of a project."
    },
    {
      "title" : "v-model",
      "para" : "As for the v-model it follows a structure that both scrum and spiral don’t align with as its an a stage by stage rather than being iterative process where things can change"
    },
    {
      "title" : "non-functional",
      "para" : "usability: having all functions available when wanting to test the app.|reliability: having all the details in place mainly looking at how it functions and if it works.|recoverability: being able to replace components with minimum work effort.|maintainability: having a way to keep a simple format that gives access to simple fixes.|serviceability: easy way to repair and maintain with little effort of a service|Performance:  making sure systems work on a set of criteria as standards.|scalability:  appropriately handling increasing and decreasing workloads.|capacity:  making sure that we can deliver enough functionality to the end users.|availability:  making sure everything functions and is on at all times.|security:  making sure that security can be maintained and can prevent what it requires to protect."
    },
    {
      "title" : "class diagram",
      "para" : "A class diagram holds the information like the following example: | class name| +age: Int| +gender: String| ____________| functions| + role() "
    },
    {
      "title" : "class diagram usecase",
      "para" : "to structure data showing the systems classes, attributes, methods and relationships among other objects"
    },

    {
      "title" : "class diagram notation",
      "para" : "class name: | name of the class | class attributes:| these show the attributes the class have| class operations:| these hold the functions and methods the class holds"
    },

    {
      "title" : "class diagram relationship types",
      "para" : "inheritence:| superclass holds the data, for the following example lets use human.| the class holds the following as attributes:| +brain: String| +bones: String| We then want to identify certain people with the superclass, these are called subclasses and take the attributes when they are connected to the superclass."
    },

    {
      "title" : "relationship between classes types",
      "para" : "there are 6 types:| Association| Inheritance| Realisation| Dependency| Aggregation| Composition| Each relation shows how the code should be implemented."
    },
    {
      "title" : "inheritance",
      "para" : "The ability of a child class to inherit the same functionality of another class making it the super class.| represented with a solid line with a white arrow"
    },

    {
      "title" : "association",
      "para" : "this represents a relationship between two classes.| single solid line beween classes"
    },

    {
      "title" : "cardinality",
      "para" : "they indicate the number of instances of a class linked to another instance from another class"
    },

    {
      "title" : "aggregation",
      "para" : "special type of association, where objects are put together to create a more complex object.| a solid line with a white diamond"
    },

    {
      "title" : "composition",
      "para" : "special type of aggregation, has a strong ownership between two classes when one class is part of another class.| represented by a solid line and a black diamond"
    },

    {
      "title" : "dependency",
      "para" : "is a relationship in which one element, depends on another element. represented by a dash line with an arrow."
    },
    {
      "title" : "realisation",
      "para" : "a relationship beween classes, interfaces, components and packages that connect the blueprint to the implementation."
    },

    {
      "title" : "class visibility",
      "para" : "there are 3 operators, the following are examples:| + is public| - is private| # is protected "
    },

    {
      "title" : "different types of testing",
      "para" : "there are 8 types of testing:| black box| white box| dynamic testing| static testing| intergrational testing| system testing| unit testing| acceptance testing"
    },

    {
      "title" : "black box",
      "para" : "this is done by testers and users| mainly used to to produce the right output when you add the input.| for example:| 2 + 2 should = 4, if it does then its correct.| this is seeing the front end, no code is being tested."
    },

    {
      "title" : "white box",
      "para" : "this is done by programmers.| the program is run through the correct functions when testing. this is all the backend checking the code."
    },

    {
      "title" : "dynamic testing",
      "para" : "this is tested by testers and programmers. | this is whenever the code is running, this can be looking at functional and non-functional elements"
    },

    {
      "title" : "stactic testing",
      "para" : "this is done by the programmers.| its to test the static code to see if it works as is"
    },


  ]
